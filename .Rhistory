library(ggplot2)
library(coda)
setwd('/Users/tcoan/Dropbox/sermons_welfare/analysis')
#--------------------------------------------------------------
# Functions
inverse_logit <- function(x) {
# Inverse logit function to calculate predicted
# probabilities from logit coefficients
return(1/(1+exp(-x)))
}
parse_model_fit <- function(fit, prob = .9){
# Parse the point estimates, CIs, and the posterior
# estimates for a model fit via brms
# Extract relevant "b" coefficients
post <- posterior_samples(fit)
post = post[grepl("^b_*", names(post))]
# Point estimates
post_medians <- as.data.frame(apply(post, 2, median))
# Uncertainty based on the HPD
post_coda <- as.mcmc(post)
hpd <- HPDinterval(post_coda, prob = prob)
hpd_df <- as.data.frame(hpd)
estimates <- as.data.frame(cbind(post_medians, hpd_df))
names(estimates) <- c("est", "lower", "upper")
return(list("estimates" = estimates, "posterior" = post))
}
get_inter_estimates <- function(post, values_matrix, prob = .9){
# Takes a data frame of posterior estimates (produced
# from parse_model_fit) and a matrix of variable values
# and returns the predicted probabilities and credible
# intervals.
# Get matrix of expected values (log odds) [n_sim X n_levels_of_interaction]
post_matrix = as.matrix(post)
y_hats = post_matrix %*% values_matrix
# Get matrix of predicted probabilities
probs = inverse_logit(y_hats)
# Get point estimates and uncertainty for predicted probabilities
prob_medians <- as.data.frame(apply(probs, 2, median))
# Uncertainty based on the HPD
post_coda <- as.mcmc(probs)
hpd <- HPDinterval(post_coda, prob = prob)
hpd_df <- as.data.frame(hpd)
estimates <- as.data.frame(cbind(prob_medians, hpd_df))
names(estimates) <- c("est", "lower", "upper")
return(estimates)
}
res = parse_model_fit(fit1)
res[['estimates']]
# Civil rights
load('./results/civil_logit_main.Rda')
res = parse_model_fit(fit1)
res[['estimates']]
load('./results/civil_logit_inter.Rda')
res = parse_model_fit(fit2)
res[['estimates']]
white_values = seq(from=-1, to=1, by=.1) # standardized values of white
# Mainline
mainline_sim_values = replicate(length(white_values),
c(1, 0, 1, 0, 1.65, NA, 0, 0, 0, NA, 0))
for (i in seq(length(white_values))){
# Replace additive effect
mainline_sim_values[6,i] = white_values[i]
mainline_sim_values[10,i] = white_values[i]
}
# Evangelical
evangelical_sim_values = replicate(length(white_values),
c(1, 0, 0, 0, 1.65, NA, 0, 0, 0, 0, 0))
for (i in seq(length(white_values))){
# Replace additive effect
evangelical_sim_values[6,i] = white_values[i]
}
main_ests = get_inter_estimates(res[['posterior']], mainline_sim_values)
evan_ests = get_inter_estimates(res[['posterior']], evangelical_sim_values)
main_ests$label = white_values
df_to_plot = as.data.frame(cbind(main_ests, evan_ests))
names(df_to_plot) = c('est_main', 'lower_main', 'upper_main', 'label',
'est_evan', 'lower_evan', 'upper_evan')
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.051, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.0385, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable)") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.041, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.025, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable)") +
theme_bw()
plt
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.042, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.026, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable)") +
theme_bw()
plt
load('./results/civil_logit_3way_inter.Rda')
res = parse_model_fit(fit3)
res[['estimates']]
white_values = seq(from=-1, to=1, by=.1) # standardized values of white
income_value = -1 # One SD below mean
# Mainline
mainline_sim_values = replicate(length(white_values),
c(1, 0, 1, 0, 1.65, NA, 0, NA, 0, NA, 0, NA, NA, 0))
for (i in seq(length(white_values))){
# Replace with assumed values
mainline_sim_values[6,i] = white_values[i]
mainline_sim_values[8,i] = income_value
mainline_sim_values[10,i] = white_values[i]
mainline_sim_values[12,i] = white_values[i]*income_value
mainline_sim_values[13,i] = white_values[i]*income_value
}
# Evangelical
evangelical_sim_values = replicate(length(white_values),
c(1, 0, 0, 0, 1.65, NA, 0, NA, 0, 0, 0, NA, 0, 0))
for (i in seq(length(white_values))){
# Replace additive effect
evangelical_sim_values[6,i] = white_values[i]
evangelical_sim_values[8,i] = income_value
evangelical_sim_values[12,i] = white_values[i]*income_value
}
main_ests = get_inter_estimates(res[['posterior']], mainline_sim_values)
evan_ests = get_inter_estimates(res[['posterior']], evangelical_sim_values)
main_ests$label = white_values
df_to_plot = as.data.frame(cbind(main_ests, evan_ests))
names(df_to_plot) = c('est_main', 'lower_main', 'upper_main', 'label',
'est_evan', 'lower_evan', 'upper_evan')
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.042, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.026, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable)") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.042, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.026, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable) -- 1 SD below mean on Income") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.043, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.025, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable) -- 1 SD below mean on Income") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.043, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.025, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable)") +
theme_bw()
plt
income_value = 1 # One SD below mean
# Mainline
mainline_sim_values = replicate(length(white_values),
c(1, 0, 1, 0, 1.65, NA, 0, NA, 0, NA, 0, NA, NA, 0))
for (i in seq(length(white_values))){
# Replace with assumed values
mainline_sim_values[6,i] = white_values[i]
mainline_sim_values[8,i] = income_value
mainline_sim_values[10,i] = white_values[i]
mainline_sim_values[12,i] = white_values[i]*income_value
mainline_sim_values[13,i] = white_values[i]*income_value
}
# Evangelical
evangelical_sim_values = replicate(length(white_values),
c(1, 0, 0, 0, 1.65, NA, 0, NA, 0, 0, 0, NA, 0, 0))
for (i in seq(length(white_values))){
# Replace additive effect
evangelical_sim_values[6,i] = white_values[i]
evangelical_sim_values[8,i] = income_value
evangelical_sim_values[12,i] = white_values[i]*income_value
}
main_ests = get_inter_estimates(res[['posterior']], mainline_sim_values)
evan_ests = get_inter_estimates(res[['posterior']], evangelical_sim_values)
# Prepare plot data
main_ests$label = white_values
df_to_plot = as.data.frame(cbind(main_ests, evan_ests))
names(df_to_plot) = c('est_main', 'lower_main', 'upper_main', 'label',
'est_evan', 'lower_evan', 'upper_evan')
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.043, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.025, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Civil Rights Discussion (binary variable)") +
theme_bw()
plt
View(evangelical_sim_values)
res[['estimates']]
load('./results/welfare_logit_3way_inter.Rda')
res = parse_model_fit(fit3)
res[['estimates']]
main_ests = get_inter_estimates(res[['posterior']], mainline_sim_values)
evan_ests = get_inter_estimates(res[['posterior']], evangelical_sim_values)
# Prepare plot data
main_ests$label = white_values
df_to_plot = as.data.frame(cbind(main_ests, evan_ests))
names(df_to_plot) = c('est_main', 'lower_main', 'upper_main', 'label',
'est_evan', 'lower_evan', 'upper_evan')
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.043, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.025, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Welfare Discussion (binary variable)") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.052, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.035, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Welfare Discussion (binary variable)") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.052, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.039, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Welfare Discussion (binary variable)") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.052, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.038, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Welfare Discussion (binary variable)") +
theme_bw()
plt
income_value = -1 # One SD below mean
# Mainline
mainline_sim_values = replicate(length(white_values),
c(1, 0, 1, 0, 1.65, NA, 0, NA, 0, NA, 0, NA, NA, 0))
for (i in seq(length(white_values))){
# Replace with assumed values
mainline_sim_values[6,i] = white_values[i]
mainline_sim_values[8,i] = income_value
mainline_sim_values[10,i] = white_values[i]
mainline_sim_values[12,i] = white_values[i]*income_value
mainline_sim_values[13,i] = white_values[i]*income_value
}
# Evangelical
evangelical_sim_values = replicate(length(white_values),
c(1, 0, 0, 0, 1.65, NA, 0, NA, 0, 0, 0, NA, 0, 0))
for (i in seq(length(white_values))){
# Replace additive effect
evangelical_sim_values[6,i] = white_values[i]
evangelical_sim_values[8,i] = income_value
evangelical_sim_values[12,i] = white_values[i]*income_value
}
#------------------------------------------------------------------------
main_ests = get_inter_estimates(res[['posterior']], mainline_sim_values)
evan_ests = get_inter_estimates(res[['posterior']], evangelical_sim_values)
# Prepare plot data
main_ests$label = white_values
df_to_plot = as.data.frame(cbind(main_ests, evan_ests))
names(df_to_plot) = c('est_main', 'lower_main', 'upper_main', 'label',
'est_evan', 'lower_evan', 'upper_evan')
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.052, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.038, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Welfare Discussion (binary variable)") +
theme_bw()
plt
plt <- ggplot(df_to_plot, aes(x=label, y=est_main)) +
geom_line(color = 'grey40') +
geom_line(aes(y=est_evan), color = "dodgerblue") +
geom_ribbon(aes(ymin=lower_main, ymax=upper_main), fill = "grey", alpha = .20) +
geom_ribbon(aes(ymin=lower_evan, ymax=upper_evan), fill = "dodgerblue", alpha = .15) +
geom_text(x=-.75, y=.051, label="Mainline", color='grey40') +
geom_text(x=-.75, y=.039, label="Evangelical", color='dodgerblue') +
xlab("White Population (standardized)") +
ylab("Predicted Probability") +
ggtitle("Welfare Discussion (binary variable)") +
theme_bw()
plt
library(superlda)
library(data.table)
library(text2vec)
library(quanteda)
library(superlda)
options(scipen=999)
#setwd("/Users/tcoan/git_repos/superlda/junk/data")
#setwd("/home/tcoan/git_repos/superlda")
library(devtools)
devtools::document()
library(superlda)
detach("package:superlda", unload=TRUE)
library("superlda", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(roxygen2)
roxygenise()
roxygenise()
library(superlda)
document()
library(superlda)
library(superlda)
library(superlda)
library(superlda)
?infer_flat_lda
?superlda::infer_flat_lda
infer_flat_lda()
library(superlda)
infer_flat_lda()
document("superlda")
document(superlda)
document("superlda.pkg")
library(superlda)
library(data.table)
library(text2vec)
library(quanteda)
library(superlda)
options(scipen=999)
setwd("/Users/tcoan/git_repos/superlda/junk/data")
setwd("/Users/tcoan/git_repos/superlda/data")
load("sermons.Rda")
dat = dat[1:10000,]
dat_train = dat[1:9500]
dat_test = dat[9501:10000]
# Take a smaller sample
dat = sermons
dat_train = dat[1:9500]
dat_test = dat[9501:10000]
dat_train = sermons[1:9500]
dat_test = sermons[9501:10000]
dat_train = sermons[1:9500,]
dat_test = sermons[9501:10000,]
# Create superlda data object
slda_obj = construct_superobj(dat_train, verbose = T)
# Fit a labeled  LDA
fit1 = train_flat_lda(slda_obj, niter = 5)
library(superlda)
setwd('/Users/tcoan/git_repos/arm_example')
library(RcppArmadillo)
package.skeleton()
library(superlda)
setwd("/Users/tcoan/git_repos/superlda")
library(superlda)
library(superlda)
library(devtools)
document()
library(devtools)
document()
library(superlda)
library(devtools)
document()
library(superlda)
library(superlda)
library(devtools)
document()
library(superlda)
library(devtools)
document()
library(superlda)
setwd("/Users/tcoan/git_repos/multi_issue_scaling/data")
hypers_raw = read.table("state.mallet", nrows = 4)
View(hypers_raw)
install.packages("mallet")
library(mallet)
install.packages('rJava')
setwd("/Users/tcoan/git_repos/multi_issue_scaling/data")
library(mallet)
library(rJava)
library(rJava)
library(mallet)
library(dplyr)
data(sotu)
library(dplyr)
data(sotu)
library(dplyr)
detach("package:dplyr", unload=TRUE)
dat = read.csv("orgtext.csv", stringsAsFactors = F)
dat_instances <-
mallet.import(id.array = row.names(dat),
text.array = dat$text,
token.regexp = "\\p{L}[\\p{L}\\p{P}]+\\p{L}")
?import
?mallet.import
stopwords_en <- system.file("stoplists/en.txt", package = "mallet")
stopwords_en
dir(system.file("stoplists/", package = "mallet"))
dat_instances <-
mallet.import(id.array = row.names(dat),
text.array = dat$text,
stoplist.file = ""
token.regexp = "\\p{L}[\\p{L}\\p{P}]+\\p{L}")
dat_instances <-
mallet.import(id.array = row.names(dat),
text.array = dat$text,
stoplist.file = "",
token.regexp = "\\p{L}[\\p{L}\\p{P}]+\\p{L}")
dat_instances <-
mallet.import(id.array = row.names(dat),
text.array = dat$text,
stoplist.file = "stops.txt",
token.regexp = "\\p{L}[\\p{L}\\p{P}]+\\p{L}")
?MalletLDA
model <- MalletLDA(num.topics=15, alpha.sum = 1, beta = 0.1)
topic.model$loadDocuments(dat_instances)
model$loadDocuments(dat_instances)
# Set hyperparameter optimization
topic.model$setAlphaOptimization(20, 50)
# Set hyperparameter optimization
model$setAlphaOptimization(20, 50)
doc.topics <- mallet.doc.topics(model, smoothed=TRUE, normalized=TRUE)
topic.words <- mallet.topic.words(topic.model, smoothed=TRUE, normalized=TRUE)
topic.words <- mallet.topic.words(model, smoothed=TRUE, normalized=TRUE)
?mallet.top.words
mallet.top.words(model, word.weights = topic.words, num.top.words = 10)
mallet.top.words(model, word.weights = topic.words[2,], num.top.words = 10)
mallet.top.words(model, word.weights = topic.words[1,], num.top.words = 10)
mallet.top.words(model, word.weights = topic.words[2,], num.top.words = 10)
mallet.top.words(model, word.weights = topic.words[4,], num.top.words = 10)
topic.words[1,]
topic.words[15,]
mallet.top.words(model, word.weights = topic.words[15,], num.top.words = 10)
vocabulary <- topic.model$getVocabulary()
dat = read.csv("orgtext.csv", stringsAsFactors = F)
# Make mallet instances. Note mallet requires a stopword list.
dat_instances <-
mallet.import(id.array = row.names(dat),
text.array = dat$text,
stoplist.file = "stops.txt",
token.regexp = "\\p{L}[\\p{L}\\p{P}]+\\p{L}")
# Insantiate model
topic.model <- MalletLDA(num.topics=15, alpha.sum = 1, beta = 0.1)
topic.model$loadDocuments(dat_instances)
# Make mallet instances. Note mallet requires a stopword list.
dat_instances <- mallet.import(text.array = dat[["text"]])
dat_instances <-
mallet.import(id.array = row.names(dat),
text.array = dat$text,
stoplist.file = "stops.txt",
token.regexp = "\\p{L}[\\p{L}\\p{P}]+\\p{L}")
install.packages(c("devtools", "quanteda", "RcppArmadillo", "text2vec"))
devtools::install_github("hadley/devtools")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages(Rcpp)
install.packages("Rcpp")
buildToolsCheck()
